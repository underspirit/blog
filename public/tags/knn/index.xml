<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Knn on Leon&#39;s Blog</title>
    <link>http://blog.songru.org/tags/knn/</link>
    <description>Recent content in Knn on Leon&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 07 Jul 2015 10:06:46 +0800</lastBuildDate>
    <atom:link href="http://blog.songru.org/tags/knn/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>统计学习方法读书笔记(3)-k近邻算法</title>
      <link>http://blog.songru.org/posts/machine-learning/statical-learning-3-K-nearest-neighbor/</link>
      <pubDate>Tue, 07 Jul 2015 10:06:46 +0800</pubDate>
      
      <guid>http://blog.songru.org/posts/machine-learning/statical-learning-3-K-nearest-neighbor/</guid>
      <description>

&lt;p&gt;k近邻法的输入为实例的特征向量,对应于特征空间的点;输出为实例的类别,可以取多类。k近邻法假设给定一个训练数据集,其中的实例类别已定。分类时,对新的实例,根据其k个最近邻的训练实例的类别,通过&lt;strong&gt;多数表决&lt;/strong&gt;等方式进行预测。因此,&lt;strong&gt;k近邻法不具有显式的学习过程&lt;/strong&gt;。k近邻法实际上利用训练数据集对特征向量空间进行划分,并作为其分类的“模型”。&lt;strong&gt;k值的选择、距离度量及分类决策规则&lt;/strong&gt;是k近邻法的三个基本要素。&lt;/p&gt;

&lt;h1 id=&#34;定义:4741110ed03a73f9f74fff72a777ae97&#34;&gt;定义&lt;/h1&gt;

&lt;p&gt;输入:训练数据集&lt;code&gt;$T=\{(x_1,y_1),(x_2,y_2),\cdots,(x_N,y_N) \}$&lt;/code&gt;, 其中,&lt;code&gt;$x_i \in \mathcal{X}=R^n$&lt;/code&gt;, &lt;code&gt;$ y_i \in \mathcal{Y} = \{ c_1, c_2, \cdots, c_K\}, i = 1,2,\cdots,N $&lt;/code&gt;, 实例特征向量&lt;code&gt;$x$&lt;/code&gt;;&lt;br /&gt;
输出:实例&lt;code&gt;$x$&lt;/code&gt;所属的类&lt;code&gt;$y$&lt;/code&gt;。&lt;br /&gt;
步骤:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;根据给定的距离度量,在训练集T中找出与x最邻近的k个点,涵盖这k个点的x的邻域记作&lt;code&gt;$N_k(x)$&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;$N_k(x)$&lt;/code&gt;中根据分类决策规则(如多数表决)决定x的类别y:
&lt;code&gt;$$  y = \arg \max \limits_{c_j} \sum_{x_i \in N_k(x)} I(y_i = c_j), \ i=1,2,\cdots,N;\ j = 1,2,\cdots,K $$&lt;/code&gt;
&lt;code&gt;$I$&lt;/code&gt;为指示函数,即当&lt;code&gt;$y_i=c_j$&lt;/code&gt;时&lt;code&gt;$I$&lt;/code&gt;为1,否则&lt;code&gt;$I$&lt;/code&gt;为0。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;距离度量:4741110ed03a73f9f74fff72a777ae97&#34;&gt;距离度量&lt;/h1&gt;

&lt;p&gt;特征空间中两个实例点的距离是两个实例点相似程度的反映。k近邻模型的特征空间一般是n维实数向量空间&lt;code&gt;$R^n$&lt;/code&gt;。使用的距离是欧氏距离,但也可以是其他距离,如更一般的&lt;code&gt;$L_p$&lt;/code&gt;距离(Lp  distance)或Minkowski距离(Minkowski distance)。&lt;br /&gt;
设特征空间x是n维实数向量空间&lt;code&gt;$R^n$&lt;/code&gt;, &lt;code&gt;$x_i, x_j \in \mathcal{X}$&lt;/code&gt;, &lt;code&gt;$ \ x_i = (x_i^{(1)}, x_i^{(2)}, \cdots , x_i^{(n)})^T $&lt;/code&gt;, &lt;code&gt;$ x_j = (x_j^{(1)}, x_j^{(2)}, \cdots , x_j^{(n)})^T$&lt;/code&gt;, &lt;code&gt;$x_i, x_j$&lt;/code&gt;的&lt;code&gt;$L_p$&lt;/code&gt;距离定义为:
&lt;code&gt;$$  L_p(x_i, x_j) = \left(  \sum_{l=1}^n \left| x_i^{(l)} - x_j^{(l)} \right|^p   \right)^{\frac{1}{p}} $$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这里&lt;code&gt;$p≥1$&lt;/code&gt;。当&lt;code&gt;$p=2$&lt;/code&gt;时,称为欧氏距离(Euclidean    distance),即
&lt;code&gt;$$  L_2(x_i, x_j) = \left(  \sum_{l=1}^n \left| x_i^{(l)} - x_j^{(l)} \right|^2   \right)^{\frac{1}{2}} $$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当p=1时,称为曼哈顿距离(Manhattan distance),即
&lt;code&gt;$$  L_1(x_i, x_j) =  \sum_{l=1}^n \left| x_i^{(l)} - x_j^{(l)} \right|  $$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当&lt;code&gt;$p=\infty $&lt;/code&gt;时,它是各个坐标距离的最大值,即
&lt;code&gt;$$  L_1(x_i, x_j) =  \max \limits_{l} \left| x_i^{(l)} - x_j^{(l)} \right|  $$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;下图给出了二维空间中p取不同值时,与原点的&lt;code&gt;$L_p$&lt;/code&gt;距离为1(Lp=1)的点的图形。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.songru.org/img//1467015385097.png&#34; alt=&#34;Alt text&#34; /&gt;
&lt;/p&gt;

&lt;h1 id=&#34;k值的选择:4741110ed03a73f9f74fff72a777ae97&#34;&gt;k值的选择&lt;/h1&gt;

&lt;p&gt;k值的选择会对k近邻法的结果产生重大影响。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果选择较小的k值,就相当于用较小的邻域中的训练实例进行预测,“学习”的近似误差(approximation error)会减小,只有与输入实例较近的(相似的)训练实例才会对预测结果起作用。但缺点是“学习”的估计误差(estimation error)会增大,预测结果会对近邻的实例点非常敏感。如果邻近的实例点恰巧是噪声,预测就会出错。&lt;strong&gt;换句话说,k值的减小就意味着整体模型变得复杂,容易发生过拟合&lt;/strong&gt;。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;如果选择较大的k值,就相当于用较大邻域中的训练实例进行预测。其优点是可以减少学习的估计误差。但缺点是学习的近似误差会增大。这时与输入实例较远的(不相似的)训练实例也会对预测起作用,使预测发生错误。k值的增大就意味着整体的模型变得简单。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;如果k=N,那么无论输入实例是什么,都将简单地预测它属于在训练实例中最多的类。这时,模型过于简单,完全忽略训练实例中的大量有用信息,是不可取的。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在应用中,k值一般取一个比较小的数值。&lt;strong&gt;通常采用交叉验证法来选取最优的k值&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&#34;分类决策规则:4741110ed03a73f9f74fff72a777ae97&#34;&gt;分类决策规则&lt;/h1&gt;

&lt;p&gt;k近邻法中的分类决策规则往往是多数表决,即由输入实例的k个邻近的训练实例中的多数类决定输入实例的类。&lt;br /&gt;
多数表决规则(majority voting rule)有如下解释:如果分类的损失函数为0-1损失函数,分类函数为
&lt;code&gt;$$ f: R^n \rightarrow \{ c_1, c_2, \cdots, c_K \} $$&lt;/code&gt;
误分类的概率是
&lt;code&gt;$$ P(Y \ne f(X)) = 1- P(Y = f(X)) $$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;对给定的实例&lt;code&gt;$x \in \mathcal{X}$&lt;/code&gt;,其最近邻的k个训练实例点构成集合&lt;code&gt;$N_k(x)$&lt;/code&gt;。如果涵盖&lt;code&gt;$N_k(x)$&lt;/code&gt;的区域的类别是&lt;code&gt;$c_j$&lt;/code&gt;,那么误分类率是
&lt;code&gt;$$ \frac{1}{k} \sum_{x_i \in N_k(x)} I(y_i \ne c_j) = 1 - \frac{1}{k} \sum_{x_i \in N_k(x)} I(y_i = c_j)  $$&lt;/code&gt;
要使误分类率最小即经验风险最小,就要使&lt;code&gt;$ \sum_{x_i \in N_k(x)} I(y_i = c_j)  $&lt;/code&gt;最大,&lt;strong&gt;所以多数表决规则等价于经验风险最小化&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&#34;k近邻法的实现-kd树:4741110ed03a73f9f74fff72a777ae97&#34;&gt;k近邻法的实现:kd树&lt;/h1&gt;

&lt;p&gt;k近邻法最简单的实现方法是线性扫描(linear    scan)。这时要计算输入实例与每一个训练实例的距离。当训练集很大时,计算非常耗时,这种方法是不可行的。为了提高k近邻搜索的效率,可以考虑使用特殊的结构存储训练数据,以减少计算距离的次数。&lt;br /&gt;
kd(K-Dimentional)树是一种对k维空间中的实例点进行存储以便对其进行快速检索的树形数据结构。kd树是二叉树,表示对k维空间的一个划分(partition),构造kd树相当于不断地用垂直于坐标轴的超平面将k维空间切分,构成一系列的k维超矩形区域。kd树的每个结点对应于一个k维超矩形区域。&lt;/p&gt;

&lt;h2 id=&#34;构造kd树的算法:4741110ed03a73f9f74fff72a777ae97&#34;&gt;构造kd树的算法:&lt;/h2&gt;

&lt;p&gt;输入:k维空间数据集&lt;code&gt;$T = \{  x_1, x_2, \cdots, x_N \}$&lt;/code&gt;, 其中&lt;code&gt;$ \ x_i = (x_i^{(1)}, x_i^{(2)}, \cdots , x_i^{(k)})^T $&lt;/code&gt;, &lt;code&gt;$i = 1, 2, \cdots, N$&lt;/code&gt;;&lt;br /&gt;
输出: kd树.&lt;/p&gt;

&lt;p&gt;步骤:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;开始:构造根结点,根结点对应于包含T的k维空间的超矩形区域。&lt;br /&gt;
选择&lt;code&gt;$x^{(1)}$&lt;/code&gt;为坐标轴,以T中所有实例的&lt;code&gt;$x^{(1)}$&lt;/code&gt;坐标的&lt;strong&gt;中位数飞&lt;/strong&gt;为切分点,将根结点对应的超矩形区域切分为两个子区域。切分由通过切分点并与坐标轴&lt;code&gt;$x^{(1)}$&lt;/code&gt;垂直的超平面实现。&lt;br /&gt;
由根结点生成深度为1的左、右子结点:左子结点对应坐标&lt;code&gt;$x^{(1)}$小&lt;/code&gt;于切分点的子区域,右子结点对应于坐标&lt;code&gt;$x^{(1)}$&lt;/code&gt;大于切分点的子区域。&lt;br /&gt;
将落在切分超平面上的实例点保存在根结点。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;重复:对深度为&lt;code&gt;$j$&lt;/code&gt;的结点,选择&lt;code&gt;$x^{(l)}$&lt;/code&gt;为切分的坐标轴,&lt;code&gt;$l=j(modk)+1$&lt;/code&gt;,以该结点的区域中所有实例的&lt;code&gt;$x^{(l)}$&lt;/code&gt;坐标的中位数为切分点,将该结点对应的超矩形区域切分为两个子区域。切分由通过切分点并与坐标轴&lt;code&gt;$x^{(l)}$&lt;/code&gt;垂直的超平面实现。&lt;br /&gt;
由该结点生成深度为j+1的左、右子结点:左子结点对应坐标&lt;code&gt;$x^{(l)}$&lt;/code&gt;小于切分点的子区域,右子结点对应坐标&lt;code&gt;$x^{(l)}$&lt;/code&gt;大于切分点的子区域。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;将落在切分超平面上的实例点保存在该结点。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;直到两个子区域没有实例存在时停止。从而形成kd树的区域划分。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通常,依次选择坐标轴对空间切分或者选取所有坐标轴中方差最大的进行切分, 选择训练实例点在选定坐标轴上的中位数(median)为切分点.&lt;/p&gt;

&lt;h2 id=&#34;搜索kd树:4741110ed03a73f9f74fff72a777ae97&#34;&gt;搜索kd树&lt;/h2&gt;

&lt;p&gt;以最近邻搜索为例:&lt;/p&gt;

&lt;p&gt;输入:已构造的kd树;目标点&lt;code&gt;$x$&lt;/code&gt;;&lt;br /&gt;
输出:&lt;code&gt;$x$&lt;/code&gt;的最近邻。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在kd树中找出包含目标点&lt;code&gt;$x$&lt;/code&gt;的叶结点:从根结点出发,递归地向下访问kd树。若目标点x当前维的坐标小于切分点的坐标,则移动到左子结点,否则移动到右子结点。直到子结点为叶结点为止。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;以此叶结点为“当前最近点”。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;递归地向上回退,在每个结点进行以下操作:&lt;br /&gt;
a. 如果该结点保存的实例点比当前最近点距离目标点更近,则以该实例点为“当前最近点”。&lt;br /&gt;
b. 当前最近点一定存在于该结点一个子结点对应的区域。检查该子结点的父结点的另一子结点对应的区域是否有更近的点。具体地,检查另一子结点对应的区域是否与以目标点为球心、以目标点与“当前最近点”间的距离为半径的超球体&lt;strong&gt;相交&lt;/strong&gt;。&lt;br /&gt;
如果相交,可能在另一个子结点对应的区域内存在距目标点更近的点,移动到另一个子结点。接着,递归地进行最近邻搜索;&lt;br /&gt;
如果不相交,向上回退。&lt;/li&gt;
&lt;li&gt;当回退到根结点时,搜索结束。最后的“当前最近点”即为x的最近邻点。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果实例点是随机分布的,kd树搜索的平均计算复杂度是&lt;code&gt;$O(logN)$&lt;/code&gt;,这里N是训练实例数。kd树更适用于训练实例数远大于空间维数时的k近邻搜索。&lt;strong&gt;当空间维数接近训练实例数时,它的效率会迅速下降,几乎接近线性扫描&lt;/strong&gt;。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>