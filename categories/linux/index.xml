<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Leon&#39;s Blog</title>
    <link>http://blog.songru.org/categories/linux/</link>
    <description>Recent content in Linux on Leon&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 18 Mar 2017 09:54:19 +0800</lastBuildDate>
    <atom:link href="http://blog.songru.org/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ubuntu修复Grub引导(备忘)</title>
      <link>http://blog.songru.org/posts/linux/Ubuntu-grub/</link>
      <pubDate>Sat, 18 Mar 2017 09:54:19 +0800</pubDate>
      
      <guid>http://blog.songru.org/posts/linux/Ubuntu-grub/</guid>
      <description>&lt;p&gt;我的系统是win7 + Ubuntu双系统, 但win7基本不用了. 由于/home目录快满了, 于是在Ubuntu中删除了win7系统下的C盘所在的分区. 但是我没有注意到我的引导程序是安装在这个分区, 导致重启之后两个系统都进不去了.&lt;/p&gt;

&lt;p&gt;下面是修复步骤:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用Ubuntu的U盘启动盘进入试用模式, 打开命令行, 在这个模式下可以查看以及操作系统的分区.&lt;/li&gt;
&lt;li&gt;安装testdisk软件, 用于恢复删除的分区.&lt;/li&gt;
&lt;li&gt;使用sudo或root运行testdisk_static, 选择&lt;code&gt;create -&amp;gt; Disk /dev/sda(选择需要恢复的磁盘) -&amp;gt; Proceed -&amp;gt; Intel -&amp;gt; Analyse -&amp;gt; Backup(备份当前的分区表, 不行还可以使用它进行恢复) -&amp;gt; Quick Search&lt;/code&gt;,  之后会查找出你丢失的分区, 然后可以选择&lt;code&gt;write&lt;/code&gt;进行写入.&lt;/li&gt;
&lt;li&gt;再找回分区时, 发现testdisk给我们多生成了一个分区, 据我的理解也没有影响, 因为我的C盘分区是磁盘的第一个分区, 以0号扇区为起点. 而引导器数据是写入在分区的第一个磁道上, 所以如果恢复后的C盘还是从0号扇区开始, 那么就相当于引导数据也恢复了.&lt;/li&gt;
&lt;li&gt;这样就找回了误删的分区, 重启电脑出现了easybcd创建的启动项, 可以进入win7系统, 但是不能进入ubuntu, 显示一个命令行&lt;code&gt;grub rescue &amp;gt;&lt;/code&gt;.不知道什么原因.&lt;/li&gt;
&lt;li&gt;再次用Ubuntu启动盘进入试用, &lt;code&gt;fdisk -l&lt;/code&gt;找到&lt;code&gt;/&lt;/code&gt;分区,然后使用&lt;code&gt;grub2-install /dev/sda&lt;/code&gt;安装grub(大概是这个命令&amp;hellip;.)&lt;/li&gt;
&lt;li&gt;再次重启, 显示的是grub2的启动项, 选择Ubuntu, 这一次没有出现&lt;code&gt;grub rescue &amp;gt;&lt;/code&gt;模式, 而是进入了启动界面, 但是一直进不去系统.&lt;/li&gt;
&lt;li&gt;从显示的信息可以看到, 应该是开机自动挂载出现了问题. 这是因为我使用testdisk恢复分区时, 虽然恢复了第一个C盘分区, 但是软件还自动修复了一些分区上的错误, 给我多加了一个分区. 这就导致各个分区的设备目录名(/dev/sda1这些)发生了变化, 所以需要更新/etc/fstab中的设备目录名.&lt;/li&gt;
&lt;li&gt;重启, 进入Ubuntu的recovery mode, 进入root命令模式. 因为默认的根目录和home目录是使用UUID进行挂载的, 所以它们是不会变的, 只需要把其他的自定义的自动挂载项注释掉即可(或者更新).&lt;/li&gt;
&lt;li&gt;但是发现不能编辑, 提示是read only模式, 重新挂载根目录&amp;rdquo;&lt;code&gt;mount –o remount, rw /&lt;/code&gt;&amp;rdquo;, 再编辑即可.&lt;/li&gt;
&lt;li&gt;重启&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Linux Socket使用小结</title>
      <link>http://blog.songru.org/posts/linux/Linux-Socket/</link>
      <pubDate>Sat, 18 Mar 2017 09:54:01 +0800</pubDate>
      
      <guid>http://blog.songru.org/posts/linux/Linux-Socket/</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. 关于recv, read, write, send方法&lt;/strong&gt;
recv较read多了一个flag参数，如果flag为0，则recv相当于read，write与send类似。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 关于阻塞&lt;/strong&gt;
recv方法默认会阻塞，直到有数据读取或者对方关闭了socket。返回读取到的字节数，这个数可能会小于指定要读取的大小，所以socket编程应该是需要自己协商需要读取的数据长度（比如把长度放在最开始）。
send方法默认不会阻塞，send之后立马返回，数据应该是已经发送到了网络上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 总结&lt;/strong&gt;
socket就有点像是两个命名管道， &lt;code&gt;pipe_1[]&lt;/code&gt; 与 &lt;code&gt;pipe_2[]&lt;/code&gt;比如：
server端读取的是&lt;code&gt;pipe_1[0]&lt;/code&gt;的数据，client端向&lt;code&gt;pipe_1[1]&lt;/code&gt;写入数据。
client端读取的是&lt;code&gt;pipe_2[0]&lt;/code&gt;的数据，server端向&lt;code&gt;pipe_2[1]&lt;/code&gt;写入数据。
读数据时默认会阻塞，等待另一端向管道写入数据；写数据默认不阻塞，写入的数据直接到pipe中去了，就算写入端关闭了socket，读写的还能从pipe中获取已写入的数据。&lt;/p&gt;

&lt;p&gt;可以通过select函数检测文件描述符的状态，比如有数据可读时则去读之类的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux IPC总结(Posix和System V对比)</title>
      <link>http://blog.songru.org/posts/linux/Linux-IPC/</link>
      <pubDate>Sat, 18 Mar 2017 09:53:43 +0800</pubDate>
      
      <guid>http://blog.songru.org/posts/linux/Linux-IPC/</guid>
      <description>

&lt;h2 id=&#34;1-管道-pipe:37b1137f87a98db4271649d677fe0ecf&#34;&gt;1. 管道(Pipe)&lt;/h2&gt;

&lt;h3 id=&#34;1-1-匿名管道-unnamed-pipe:37b1137f87a98db4271649d677fe0ecf&#34;&gt;1.1 匿名管道(Unnamed Pipe)&lt;/h3&gt;

&lt;h4 id=&#34;1-1-1-popen:37b1137f87a98db4271649d677fe0ecf&#34;&gt;1.1.1 popen&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
FILE* popen (const char *command, const char *open_mode);
int pclose(FILE *stream_to_close);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　popen()函数通过创建一个管道，调用fork()产生一个子进程，执行一个shell以运行命令来开启一个进程。这个管道必须由pclose()函数关闭，而不是fclose()函数。pclose()函数关闭标准I/O流，等待命令执行结束，然后返回shell的终止状态。如果shell不能被执行，则pclose()返回的终止状态与shell已执行exit一样。&lt;/p&gt;

&lt;p&gt;　　type参数只能是读或者写中的一种，得到的返回值（标准I/O流）也具有和type相应的只读或只写类型。如果type是&amp;rdquo;r&amp;rdquo;则文件指针连接到command的标准输出；如果type是&amp;rdquo;w&amp;rdquo;则文件指针连接到command的标准输入。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; #include &amp;lt;unistd.h&amp;gt;
 #include &amp;lt;stdlib.h&amp;gt;
 #include &amp;lt;stdio.h&amp;gt;
 #include &amp;lt;string.h&amp;gt;
 
 int main()
 {
     FILE *read_fp = NULL;
     FILE *write_fp = NULL;
     char buffer[BUFSIZ + 1]; 
     printf(&amp;quot;BUFSIZ: %d\n&amp;quot;, BUFSIZ);
     int chars_read = 0;
     
     //初始化缓冲区
     memset(buffer, &#39;\0&#39;, sizeof(buffer));
     //打开ls和grep进程
     read_fp = popen(&amp;quot;ls -l /home/lsr&amp;quot;, &amp;quot;r&amp;quot;);
     write_fp = popen(&amp;quot;grep rwxrwxr-x&amp;quot;, &amp;quot;w&amp;quot;);
     //两个进程都打开成功
     if(read_fp &amp;amp;&amp;amp; write_fp)
     {   
         //读取一个数据块
         chars_read = fread(buffer, sizeof(char), BUFSIZ, read_fp);
         while(chars_read &amp;gt; 0)
         {
             //设置结尾字符
             buffer[chars_read] = &#39;\0&#39;;
             //把数据写入grep进程
             fwrite(buffer, sizeof(char), chars_read, write_fp);
             //还有数据可读，循环读取数据，直到读完所有数据
             chars_read = fread(buffer, sizeof(char), BUFSIZ, read_fp);
         }
         //关闭文件流
         pclose(read_fp);
         pclose(write_fp);
         exit(EXIT_SUCCESS);
     }   
     exit(EXIT_FAILURE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;1-1-2-pipe:37b1137f87a98db4271649d677fe0ecf&#34;&gt;1.1.2 pipe&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;
int pipe(int file_descriptor[2]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pipe&lt;/code&gt;函数跟&lt;code&gt;popen&lt;/code&gt;函数的一个重大区别是，&lt;code&gt;popen&lt;/code&gt;函数是基于文件流（FILE）工作的，而&lt;code&gt;pipe&lt;/code&gt;是基于文件描述符工作的，所以在使用&lt;code&gt;pipe&lt;/code&gt;后，数据必须要用底层的&lt;code&gt;read&lt;/code&gt;和&lt;code&gt;write&lt;/code&gt;调用来读取和发送。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pipe&lt;/code&gt;函数会创建两个文件描述符, 并且不要用&lt;code&gt;file_descriptor[0]&lt;/code&gt;写数据，也不要用&lt;code&gt;file_descriptor[1]&lt;/code&gt;读数据，其行为未定义的，但在有些系统上可能会返回-表示调用失败。数据只能从&lt;code&gt;file_descriptor[0]&lt;/code&gt;中读取，数据也只能写入到&lt;code&gt;file_descriptor[1]&lt;/code&gt;, 不能倒过来。&lt;/p&gt;

&lt;p&gt;它的一个&lt;strong&gt;缺点&lt;/strong&gt;，就是通信的进程，它们的关系一定是父子进程的关系，这就使得它的使用受到了一点的限制，但是我们可以使用命名管道来解决这个问题。&lt;/p&gt;

&lt;h3 id=&#34;1-2-命名管道-named-pipe:37b1137f87a98db4271649d677fe0ecf&#34;&gt;1.2 命名管道(Named Pipe)&lt;/h3&gt;

&lt;p&gt;命名管道也被称为FIFO文件，它是一种特殊类型的文件，它在文件系统中以文件名的形式存在，但是它的行为却和之前所讲的没有名字的管道（匿名管道）类似。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;
int mkfifo(const char *filename, mode_t mode);
int mknod(const char *filename, mode_t mode | S_IFIFO, (dev_t)0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这两个函数都能创建一个FIFO文件，注意是创建一个真实存在于文件系统中的文件，filename指定了文件名，而mode则指定了文件的读写权限。
&lt;code&gt;mknod&lt;/code&gt;是比较老的函数，而使用&lt;code&gt;mkfifo&lt;/code&gt;函数更加简单和规范，所以建议在可能的情况下，尽量使用&lt;code&gt;mkfifo&lt;/code&gt;而不是&lt;code&gt;mknod&lt;/code&gt;。
在Linux系统的shell下, 也可以使用&lt;code&gt;mkfifo&lt;/code&gt;或者&lt;code&gt;mknod&lt;/code&gt;命令创建管道文件, 然后通过流重定向&lt;code&gt;echo hello &amp;gt; myfifo&lt;/code&gt;可以向管道写入, 通过&lt;code&gt;cat mypipe&lt;/code&gt;可以读取管道数据.&lt;/p&gt;

&lt;p&gt;在C++程序中, 也是使用&lt;code&gt;open&lt;/code&gt;函数打开一个管道, 然后在不同的进程中可以只用&lt;code&gt;read&lt;/code&gt;和&lt;code&gt;write&lt;/code&gt;函数读取和写入数据到管道中.&lt;/p&gt;

&lt;h2 id=&#34;2-信号-signal:37b1137f87a98db4271649d677fe0ecf&#34;&gt;2. 信号(Signal)&lt;/h2&gt;

&lt;p&gt;信号是UNIX和Linux系统响应某些条件而产生的一个事件，接收到该信号的进程会相应地采取一些行动。通常信号是由一个错误产生的。但它们还可以作为进程间通信或修改行为的一种方式，明确地由一个进程发送给另一个进程。一个信号的产生叫生成，接收到一个信号叫捕获。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;signal.h&amp;gt;
void (*signal(int sig, void (*func)(int)))(int);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;程序可用使用&lt;code&gt;signal&lt;/code&gt;函数来指定接受到某种信号后的处理方式，也可以选择忽略和恢复其默认行为来工作。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;signal&lt;/code&gt;函数定义的是某一个信号的行为, 我们还可以使用信息集的系列函数来定义多个信号的行为, 比如可以设定一些我们需要处理的信号，并设置一些我们不需要处理的信号.&lt;/p&gt;

&lt;h2 id=&#34;3-信号量-semaphore:37b1137f87a98db4271649d677fe0ecf&#34;&gt;3. 信号量(Semaphore)&lt;/h2&gt;

&lt;p&gt;信号量的使用主要是用来&lt;strong&gt;保护共享资源&lt;/strong&gt;，使得资源在一个时刻只有一个进程（线程）所拥有。
信号量的值为正的时候，说明它空闲。所测试的线程可以锁定而使用它。若为0，说明它被占用，测试的线程要进入睡眠队列中，等待被唤醒。&lt;/p&gt;

&lt;h3 id=&#34;3-1-posix信号量:37b1137f87a98db4271649d677fe0ecf&#34;&gt;3.1 POSIX信号量&lt;/h3&gt;

&lt;p&gt;对POSIX来说，信号量是个&lt;strong&gt;非负整数&lt;/strong&gt;。常用于线程间同步。
POSIX信号量的引用头文件是&lt;code&gt;&amp;lt;semaphore.h&amp;gt;&lt;/code&gt;, 其相关函数名都是sem_op这个带下划线的形式.&lt;/p&gt;

&lt;h3 id=&#34;3-1-2-无名信号量:37b1137f87a98db4271649d677fe0ecf&#34;&gt;3.1.2 无名信号量&lt;/h3&gt;

&lt;p&gt;无名信号量常用于多线程间的同步，同时也用于相关进程间的同步。也就是说，无名信号量必须是多个进程（线程）的共享变量，无名信号量要保护的变量也必须是多个进程（线程）的共享变量，这两个条件是缺一不可的。
POSIX无名信号量由&lt;code&gt;sem_init&lt;/code&gt;函数创建:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;semaphore.h&amp;gt;
int sem_init(sem_t *sem, int pshared, unsigned int value);

Link with -pthread.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-共享内存-shared-memory:37b1137f87a98db4271649d677fe0ecf&#34;&gt;4. 共享内存(Shared memory)&lt;/h2&gt;

&lt;h2 id=&#34;5-消息队列-message-queue:37b1137f87a98db4271649d677fe0ecf&#34;&gt;5. 消息队列(Message queue)&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Centos 7安装tmate和tmate-slave</title>
      <link>http://blog.songru.org/posts/linux/CentOS7-Install-tmate&amp;tmate-slave/</link>
      <pubDate>Sat, 18 Mar 2017 09:48:26 +0800</pubDate>
      
      <guid>http://blog.songru.org/posts/linux/CentOS7-Install-tmate&amp;tmate-slave/</guid>
      <description>&lt;pre&gt;&lt;code&gt;yum install gcc kernel-devel make ncurses-devel
yum install git cmake ruby zlib-devel openssl-devel libevent-devel ncurses-devel
yum group install &amp;quot;Development Tools&amp;quot;
yum install libssh libssh-devel

# Install msgpack
yum install msgpack msgpack-devel python-msgpack
# If not work, then install with source
git clone https://github.com/msgpack/msgpack-c.git
cd msgpack-c
cmake .
make
sudo make install

# Install tmate
./autogen.sh &amp;amp;&amp;amp; \
./configure  &amp;amp;&amp;amp; \
make         &amp;amp;&amp;amp; \
make install

# If not work, install libevent2 with source
wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz
# cd to libevent2 src
./configure --prefix=/usr/local
make &amp;amp;&amp;amp; make install

# Install tmate-slave
git clone https://github.com/tmate-io/tmate-slave.git &amp;amp;&amp;amp; cd tmate-slave
./create_keys.sh # This will generate SSH keys, remember the keys fingerprints.
./autogen.sh &amp;amp;&amp;amp; ./configure &amp;amp;&amp;amp; make

# Start
sudo ./tmate-slave -p 222
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu 14.04 笔记本双显卡CUDA 安装</title>
      <link>http://blog.songru.org/posts/linux/NoteBook-Ubuntu-Install/</link>
      <pubDate>Sat, 18 Mar 2017 09:36:53 +0800</pubDate>
      
      <guid>http://blog.songru.org/posts/linux/NoteBook-Ubuntu-Install/</guid>
      <description>

&lt;h1 id=&#34;ubuntu-14-04-笔记本双显卡cuda-安装:b5033d739bcdb1d7b241dd7a0f168519&#34;&gt;Ubuntu 14.04 笔记本双显卡CUDA 安装&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;安装ubuntu系统&lt;/li&gt;
&lt;li&gt;在系统设置 -&amp;gt;  软件和更新 -&amp;gt; 附加驱动 中如果有nvidia驱动， 则表示该系统支持cuda， 可以继续后面步骤。&lt;/li&gt;
&lt;li&gt;下载新版的NVIDIA显卡驱动， CUDA的run file里面的驱动或者是deb中的都太老了, 不适合新版tensorflow。&lt;/li&gt;
&lt;li&gt;安装新版的NVIDIA驱动：&lt;br /&gt;
&lt;code&gt;sh NVIDIA-Linux-x86_64-375.26.run -no-x-check -no-nouveau-check -no-opengl-files&lt;/code&gt;
–no-x-check 安装驱动时关闭X服务
–no-nouveau-check 安装驱动时禁用nouveau
–no-opengl-files 只安装驱动文件，不安装OpenGL文件&lt;/li&gt;
&lt;li&gt;通过run文件安装cuda，选择不安装显卡驱动&lt;/li&gt;
&lt;li&gt;成功&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu下matplotlib绘图中文乱码</title>
      <link>http://blog.songru.org/posts/linux/Ubuntu_Matplotlib_fix/</link>
      <pubDate>Sat, 23 Apr 2016 10:09:12 +0800</pubDate>
      
      <guid>http://blog.songru.org/posts/linux/Ubuntu_Matplotlib_fix/</guid>
      <description>

&lt;p&gt;原因：在Ubuntu下安装了各种中文字体，但是修改matplotlibrc文件后，均提示找不到该字体，猜测可能matplotlib字体列表与系统字体列表不同。&lt;/p&gt;

&lt;h2 id=&#34;方法一-持久性修改:c4a9591d3c6525e63df3a6e304bb9db6&#34;&gt;方法一（持久性修改）&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;首先查看matplotlib支持的中文字体&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*-
from matplotlib.font_manager import FontManager
import subprocess

fm = FontManager()
mat_fonts = set(f.name for f in fm.ttflist)

output = subprocess.check_output(
    &#39;fc-list :lang=zh -f &amp;quot;%{family}\n&amp;quot;&#39;, shell=True)
# print &#39;*&#39; * 10, &#39;系统可用的中文字体&#39;, &#39;*&#39; * 10
# print output
zh_fonts = set(f.split(&#39;,&#39;, 1)[0] for f in output.split(&#39;\n&#39;))
available = mat_fonts &amp;amp; zh_fonts

print &#39;*&#39; * 10, &#39;可用的字体&#39;, &#39;*&#39; * 10
for f in available:
    print f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出为：
Droid Sans Fallback
YaHei Consolas Hybrid
就是求出系统字体列表与matplotlib字体列表的交集&lt;/p&gt;

&lt;p&gt;2.修改matplotlibrc文件&lt;br /&gt;
Ubuntu默认对应的是/etc/matplotlibrc，可以复制到～/.matplotlibrc/matplotlibrc，然后配置后者即可
修改&lt;strong&gt;font.sans-serif&lt;/strong&gt;为上面的一个输出结果即可, 还需要修改&lt;strong&gt;axes.unicode_minus&lt;/strong&gt;为&lt;strong&gt;False&lt;/strong&gt;,否则图像是负号&amp;rsquo;-&amp;lsquo;会显示为方块.&lt;/p&gt;

&lt;h2 id=&#34;方法二-临时性修改:c4a9591d3c6525e63df3a6e304bb9db6&#34;&gt;方法二（临时性修改）&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*-
 import matplotlib as mpl
 import matplotlib.pyplot as plt
 
 mpl.rcParams[&#39;font.sans-serif&#39;] = [&#39;Droid Sans Fallback&#39;] # 指定字体名字
 mpl.rcParams[&#39;axes.unicode_minus&#39;] = False #解决保存图像是负号&#39;-&#39;显示为方块的问题
 plt.figure()
 plt.xlabel(u&#39;性别&#39;)
 plt.ylabel(u&#39;人数&#39;)
 plt.xticks((0,1),(u&#39;男&#39;,u&#39;女&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*-
 import matplotlib.pyplot as plt
 from matplotlib import font_manager

 zh_font = font_manager.FontProperties(fname=r&#39;/home/lsr/Documents/simsun.ttf&#39;, size=14) # 指定字体文件
 
 plt.figure()
 plt.xlabel(u&#39;性别&#39;, fontproperties=zh_font) # 使用字体配置
 plt.ylabel(u&#39;人数&#39;,fontproperties=zh_font)
 plt.xticks((0,1),(u&#39;男&#39;,u&#39;女&#39;)) # 没有使用字体配置，乱码
 plt.bar(left = (0,1),height = (1,0.5),width = 0.35)
 plt.show()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Linux命令</title>
      <link>http://blog.songru.org/posts/linux/linuxComands/</link>
      <pubDate>Tue, 22 Sep 2015 10:09:12 +0800</pubDate>
      
      <guid>http://blog.songru.org/posts/linux/linuxComands/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;移动文件（夹）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mv originalDir/source.txt targetDir/target.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;删除文件（夹）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm dir/target.file   //删除文件
rm -r dir //删除文件夹
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;利用软件源下载安装软件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install package 安装包
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解压文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar -zxvf XXX压缩包
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建文件夹&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir dir    // -p参数可以创建子文件夹
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;touch dir/a.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解压文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar -zxvf file.tar.gz    //解压到当前目录
tar -zxvf file.tar.gz -C dir    //解压到制定目录
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果是zip格式的话：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unzip  abc.zip -d /home/test/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;复制文件（夹）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp target.file copy.file    //复制文件
cp -r targetDir copyDir //复制文件夹，使用-r递归复制
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;打印当前路径&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pwd
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;管理员权限&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo otherComand...     //使用root权限执行后续命令,一次性的
sudo su    //登录root,以后的命令都是使用root权限
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查看文件系统使用情况信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    df -Tha    //T显示分区类型，h易读格式，a显示所有   
    fdisk -l /dev/sda    // 查看指定磁盘分区情况
    parted /dev/sda    // parted为分区工具，p可查看分区情况，quit退出
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查看文件(夹)大小&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;du filename/dir    //-s易于阅读,-h显示总览
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查看内存使用情况&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;free -m    //-m表示单位为m
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;任务管理器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;top     //退出按 q
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查看系统信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;uname -a    //-a查看所有信息
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查看网络接口信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MD5校验&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo md5sum filename
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查看文件(夹)权限情况&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls -l path/filename      //查看path路径下名为filename的文件或文件夹的权限
ls -ls path    //查看path路径下的所有文件的权限
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;修改文件(夹)权限(change mode)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chmod -（代表类型）×××（所有者）×××（组用户）×××（其他用户）    //其中×××指文件名（也可以是文件夹名，不过要在chmod后加-ld）,使用 -R 参数来递归修改所有子文件   


//三位数的每一位都表示一个用户类型的权限设置。取值是0～7，即二进制的[000]~[111],这个三位的二进制数的每一位分别表示读、写、执行权限。      
//如000表示三项权限均无，而100表示只读。这样，我们就有了下面的对应：
0 [000] 无任何权限
4 [100] 只读权限
6 [110] 读写权限
7 [111] 读写执行权限


//常用的
sudo chmod 600 ××× （只有所有者有读和写的权限）
sudo chmod 644 ××× （所有者有读和写的权限，组用户只有读的权限）
sudo chmod 700 ××× （只有所有者有读和写以及执行的权限）
sudo chmod 666 ××× （每个人都有读和写的权限）
sudo chmod 777 ××× （每个人都有读和写以及执行的权限）
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;修改文件所有者(change owner)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chown -R lsr software/    // -R 递归修改 software文件夹所有者为lsr
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;读取文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat a.txt   # 读取a.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;转换文件编码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iconv -f gbk -t utf-8   # 将文件编码从gbk转到utf8
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查找行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grep -E &amp;quot;&amp;lt;content&amp;gt;|&amp;lt;contenttitle&amp;gt;&amp;quot;  # 保留含有&amp;lt;content&amp;gt;或者&amp;lt;contenttitle&amp;gt;的行,-E表示使用正则
grep -v &amp;quot;hehe&amp;quot; # -v 排除匹配的行
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;删除文本中指定内容&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tr -d &amp;quot;&amp;lt;content&amp;gt;|&amp;lt;contenttitle&amp;gt;|&amp;lt;/content&amp;gt;|&amp;lt;/contenttitle&amp;gt;|&amp;gt;&amp;quot;   # -d表示删除,删除引号内的字符
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;多个命令连续执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat a.txt | iconv -f gbk -t utf-8 | grep -E &amp;quot;&amp;lt;content&amp;gt;|&amp;lt;contenttitle&amp;gt;&amp;quot; | tr -d &amp;quot;&amp;lt;content&amp;gt;|&amp;lt;contenttitle&amp;gt;|&amp;lt;/content&amp;gt;|&amp;lt;/contenttitle&amp;gt;|&amp;gt;&amp;quot; &amp;gt; corpus.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查找文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find SogouCS/ -name &amp;quot;m_*&amp;quot;   # 在SogouCS目录中按文件名-name查找含有 m_*的文件
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;命令参数传递&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# xargs将文件名传递过来, -i 表示使用传过来的参数替换 {}
find SogouCS/ -name &amp;quot;m_*&amp;quot; | xargs -i mv {} SogouCS_M/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;大小写转换&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tr A-Z a-z  # 全部转换为小写
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;文本替换&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 替换’为&#39;，′为&#39;，&#39;为&#39; , -e 表示多个编辑,即多个sed同时, s表示替换,g表示全局替换
sed -e &amp;quot;s/’/&#39;/g&amp;quot; -e &amp;quot;s/′/&#39;/g&amp;quot; -e &amp;quot;s/&#39;&#39;/ /g&amp;quot;


# 替换A-Za-z&#39;_ \n之外的字符为空格,-c 表示排除..之外的都..
tr -c &amp;quot;A-Za-z&#39;_ \n&amp;quot; &amp;quot; &amp;quot;


# 例子             输入文件                                                                    输出到文件
sed -e &amp;quot;s/’/&#39;/g&amp;quot; -e &amp;quot;s/′/&#39;/g&amp;quot; -e &amp;quot;s/&#39;&#39;/ /g&amp;quot; &amp;lt; news.2012.en.shuffled | tr -c &amp;quot;A-Za-z&#39;_ \n&amp;quot; &amp;quot; &amp;quot; &amp;gt; news.2012.en.shuffled-norm0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;从第3000行开始，显示1000行。即显示3000~3999行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat filename | tail -n +3000 | head -n 1000
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;显示1000行到3000行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat filename| head -n 3000 | tail -n +1000
*注意两种方法的顺序
分解：
    tail -n 1000：显示最后1000行
    tail -n +1000：从1000行开始显示，显示1000行以后的
    tail -n -1000：相当于tail -n 1000
    head -n 1000：显示前面1000行
    head -n +1000：显示前面1000行
    head -n -1000：从第1行到倒数1000行
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;用sed命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sed -n &#39;5,10p&#39; filename # 查看文件的第5行到第10行, p表示打印匹配行
sed -n &#39;5p&#39; filename # 只显示第5行
sed -n &#39;5,$p&#39; filename # 查看文件的第5行到最后一行, $表示最后一行
sed -n &#39;3,/movie/&#39;p temp.txt   # 只在第3行查找movie并打印
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linux统计文件行数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wc -l file # - c 统计字节数, - l 统计行数, - w 统计字数。


1.统计demo目录下，js文件数量：
find demo/ -name &amp;quot;*.js&amp;quot; | wc -l


2.统计demo目录下所有js文件代码行数：
find demo/ -name &amp;quot;*.js&amp;quot; | xargs cat | wc -l 或 
wc -l `find ./ -name &amp;quot;*.js&amp;quot;` | tail -n 1 # 取最后一行,总行数


3.统计demo目录下所有js文件代码行数，过滤了空行：
find /demo -name &amp;quot;*.js&amp;quot; | xargs cat | grep -v ^$ | wc -l
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;打印进程信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ps aux
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ssh连接主机,并执行命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh username@ip &#39;command&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;shell中的一种for循环&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for((i=1;i&amp;lt;=10;i++))
do
    echo compute-0-$i
    ssh compute-0-$i &amp;quot;nvidia-smi | grep &#39;%&#39; &amp;quot;
 done
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;awk中的while循环&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;awk &#39;BEGIN{s=&amp;quot;&amp;quot;;i=11}{while(i&amp;lt;=NF){ s=s&amp;quot; &amp;quot;&amp;quot;&amp;quot;$i;i++; } print s;}&#39; # 提取出command &amp;quot;&amp;quot;用于拼接字符串, NF表示总的字段数
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;半角字符与全角字符之间的unicode码相差65248,而全角空格为12288,半角为32,需特殊对待.&lt;/p&gt;

&lt;p&gt;java代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 全角转半角
 * @param str
 * @return
 */
public static String FullWidth2HalfWidth(String str){
    if (null == str || str.length() &amp;lt;= 0) {
        return &amp;quot;&amp;quot;;
    }
    char []cs;
    cs = str.toCharArray();
    int k;
    for(int i = 0; i &amp;lt; cs.length; i++){
        k = (int)cs[i];
        if(k &amp;gt;= 65281 &amp;amp;&amp;amp; k &amp;lt;= 65374){
            cs[i] -= 65248;
        }else if(k == 12288 || k == 58380){
            cs[i] = 32;
        }
    }
    return new String(cs);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;写的bat代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@echo off
echo Deploying updates to GitHub...

:: Build the project.
hugo -t red

:: Add changes to git.
git add -A

:: Commit changes.
set msg=rebuilding site %date% %time%
if not &amp;quot;%1&amp;quot;==&amp;quot;&amp;quot; (
  set msg=%1
)
git commit -m &amp;quot;%msg&amp;quot;

:: Push source and build repos.
git push origin hugo
git subtree push --prefix=public origin master

pause
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对应的shell代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project.
hugo -t red

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin hugo
git subtree push --prefix=public origin master
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>